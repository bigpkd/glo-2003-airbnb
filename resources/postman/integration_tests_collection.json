{
	"info": {
		"_postman_id": "a242274e-451e-4b19-b23e-711ee8b7ca0b",
		"name": "Airbnb - Integration Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Set up",
			"item": [
				{
					"name": "Add bed",
					"item": [
						{
							"name": "Bed 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"    var bedNumber = responseBody.split('/')[2]",
											"    pm.environment.set(\"beds.1.bedNumber\", bedNumber)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ownerPublicKey\": \"8F0436A6FB049085B7F19AB73933973BF21276276F2EC7D122AC110BB46A3A4E\",\r\n  \"zipCode\": \"12345\",\r\n  \"bedType\": \"latex\",\r\n  \"cleaningFrequency\": \"weekly\",\r\n  \"bloodTypes\": [\r\n    \"O-\", \r\n    \"O+\"\r\n  ],\r\n  \"capacity\": 234,\r\n  \"packages\": [\r\n    { \r\n      \"name\": \"bloodthirsty\",\r\n      \"pricePerNight\": 100.00\r\n    },\r\n    { \r\n      \"name\": \"allYouCanDrink\",\r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"    var bedNumber = responseBody.split('/')[2]",
											"    pm.environment.set(\"beds.2.bedNumber\", bedNumber)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ownerPublicKey\": \"8F0436A6FB049085B7F19AB73933973BF21276276F2EC7D122AC110BB46A3A4E\",\r\n  \"zipCode\": \"12345\",\r\n  \"bedType\": \"latex\",\r\n  \"cleaningFrequency\": \"weekly\",\r\n  \"bloodTypes\": [\r\n    \"O-\", \r\n    \"O+\"\r\n  ],\r\n  \"capacity\": 234,\r\n  \"packages\": [\r\n    { \r\n      \"name\": \"bloodthirsty\",\r\n      \"pricePerNight\": 100.00\r\n    },\r\n    { \r\n      \"name\": \"allYouCanDrink\",\r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"    var bedNumber = responseBody.split('/')[2]",
											"    pm.environment.set(\"beds.3.bedNumber\", bedNumber)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"springs\",\"bloodTypes\":[\"O+\",\"B-\",\"A-\",\"A-\",\"B-\",\"O+\"],\"capacity\":338,\"cleaningFrequency\":\"weekly\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45},{\"name\":\"sweetTooth\",\"pricePerNight\":464.8}],\"ownerPublicKey\":\"58912A016CD522708ED8A58D9A767846F590B4C21EE2E86E0AF8491186385226\",\"zipCode\":\"32068\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"    var bedNumber = responseBody.split('/')[2]",
											"    pm.environment.set(\"beds.4.bedNumber\", bedNumber)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"springs\",\"bloodTypes\":[\"O+\",\"B-\",\"A-\",\"A-\",\"B-\",\"O+\"],\"capacity\":338,\"cleaningFrequency\":\"weekly\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45},{\"name\":\"sweetTooth\",\"pricePerNight\":464.8}],\"ownerPublicKey\":\"58912A016CD522708ED8A58D9A767846F590B4C21EE2E86E0AF8491186385226\",\"zipCode\":\"32068\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"memoryFoam\",\"bloodTypes\":[\"O-\",\"A-\"],\"capacity\":21,\"cleaningFrequency\":\"weekly\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45}],\"ownerPublicKey\":\"312BFB1BFA253F836EF0D680D38B924A08CC67996D40EBE6857B8580A166A006\",\"zipCode\":\"50401\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"memoryFoam\",\"bloodTypes\":[\"B-\",\"A+\",\"O+\",\"B+\",\"B+\"],\"capacity\":378,\"cleaningFrequency\":\"never\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45},{\"name\":\"sweetTooth\",\"pricePerNight\":464.8}],\"ownerPublicKey\":\"E99A0BC8D9C676A2EFF0BC994D7E38481B571ABCD92F4F591DF0543BE246F09C\",\"zipCode\":\"55311\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"memoryFoam\",\"bloodTypes\":[\"B-\",\"A+\",\"O+\",\"B+\",\"B+\"],\"capacity\":378,\"cleaningFrequency\":\"never\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45},{\"name\":\"sweetTooth\",\"pricePerNight\":464.8}],\"ownerPublicKey\":\"E99A0BC8D9C676A2EFF0BC994D7E38481B571ABCD92F4F591DF0543BE246F09C\",\"zipCode\":\"55311\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"memoryFoam\",\"bloodTypes\":[\"B-\"],\"capacity\":120,\"cleaningFrequency\":\"weekly\",\"lodgingMode\":\"private\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45}],\"ownerPublicKey\":\"644D0DE00B3E6978FC072FD94EA87F62248848140421F41AAB90DA01AEAE0720\",\"zipCode\":\"50023\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"springs\",\"bloodTypes\":[\"B-\",\"AB+\",\"O-\",\"O+\"],\"capacity\":172,\"cleaningFrequency\":\"monthly\",\"lodgingMode\":\"private\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45},{\"name\":\"sweetTooth\",\"pricePerNight\":464.8}],\"ownerPublicKey\":\"64D5ED59450F66F410B44E06ACACDA8928D6552417262F2A5284F4522E1A76D1\",\"zipCode\":\"30040\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"latex\",\"bloodTypes\":[\"O-\",\"O+\"],\"capacity\":56,\"cleaningFrequency\":\"monthly\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99}],\"ownerPublicKey\":\"A22A0015DF83162B4BC3EF3E1E1A581349A316CB346D581EAA37C28A6516988D\",\"zipCode\":\"20874\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 11",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"springs\",\"bloodTypes\":[\"AB+\",\"B-\"],\"capacity\":68,\"cleaningFrequency\":\"never\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45}],\"ownerPublicKey\":\"BF1F08C7D49355F9E684D15F11CA05C7000F324C5AAEAD9B4DAE1820F7410E7E\",\"zipCode\":\"28115\"} create-bed.feature:12 - status code was: 400, expected: 201, response time: 145, url: https://glo2003-h2020-eq08.herokuapp.com/beds, response: {\"description\":\"packages should be an array of package name with its corresponding price per night\",\"error\":\"INVALID_PACKAGES\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 12",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"springs\",\"bloodTypes\":[\"O-\",\"O-\",\"A+\"],\"capacity\":262,\"cleaningFrequency\":\"weekly\",\"lodgingMode\":\"private\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45},{\"name\":\"sweetTooth\",\"pricePerNight\":464.8}],\"ownerPublicKey\":\"7642C5F4F346F63D01BD94D91743533FB2D56B12012F3FEB8B967E040250FDF0\",\"zipCode\":\"56001\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 13",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"springs\",\"bloodTypes\":[\"B+\"],\"capacity\":381,\"cleaningFrequency\":\"annual\",\"lodgingMode\":\"private\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45}],\"ownerPublicKey\":\"10157F58F73DC6B972E01585424BF20F8B62BBDD0EE12081533ADC2F5BA271D1\",\"zipCode\":\"55033\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 14",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"springs\",\"bloodTypes\":[\"AB+\",\"O+\",\"O+\",\"AB-\"],\"capacity\":70,\"cleaningFrequency\":\"weekly\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45},{\"name\":\"sweetTooth\",\"pricePerNight\":464.8}],\"ownerPublicKey\":\"D092ED9FE936F87639E73C54092E78C95450DCCA57C58FA2FF9DEF8F89F19D80\",\"zipCode\":\"07087\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 15",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"memoryFoam\",\"bloodTypes\":[\"B-\"],\"capacity\":236,\"cleaningFrequency\":\"annual\",\"lodgingMode\":\"private\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45},{\"name\":\"sweetTooth\",\"pricePerNight\":464.8}],\"ownerPublicKey\":\"EA38CC9DC9EFD3792BE682B02672E38FC8939EDB14327FA041C6B24051ECA754\",\"zipCode\":\"06106\"} create-bed.feature:12 - status code was: 400, expected: 201, response time: 162, url: https://glo2003-h2020-eq08.herokuapp.com/beds, response: {\"description\":\"packages should be an array of package name with its corresponding price per night\",\"error\":\"INVALID_PACKAGES\"} ------- feature call (loop) failed at index: 11 caller: classpath:shared/request/create-bed.feature arg: {\"bedType\":\"springs\",\"bloodTypes\":[\"O+\",\"B+\",\"B-\",\"AB+\",\"O+\",\"B+\"],\"capacity\":64,\"cleaningFrequency\":\"monthly\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99}],\"ownerPublicKey\":\"072C2C64C1CDE37AC5A9CAFEA14533EBCABDDEBB6C46BF91F6167F96F8C2C841\",\"zipCode\":\"02920\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 16",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"latex\",\"bloodTypes\":[\"AB-\",\"A-\"],\"capacity\":114,\"cleaningFrequency\":\"annual\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45}],\"ownerPublicKey\":\"2CA3A38F07EBB031262632B24D4C233E4D9F63C8D27893FCAD6D08122B7E4141\",\"zipCode\":\"38655\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 17",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"memoryFoam\",\"bloodTypes\":[\"AB+\",\"A-\",\"B-\",\"A+\",\"A-\",\"A-\"],\"capacity\":385,\"cleaningFrequency\":\"weekly\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99}],\"ownerPublicKey\":\"D2EE48DB4C549A45FC337A1F00D8F24CDEAF4F0B4F46A48C6FD22688F9BBA64E\",\"zipCode\":\"19468\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 18",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"memoryFoam\",\"bloodTypes\":[\"AB-\",\"AB+\",\"O+\"],\"capacity\":339,\"cleaningFrequency\":\"never\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45},{\"name\":\"sweetTooth\",\"pricePerNight\":464.8}],\"ownerPublicKey\":\"E1E5E838268C0A8E51D254E0CC41CAE304BA56BF2E9875B343F6A54F10517987\",\"zipCode\":\"01970\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 19",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"springs\",\"bloodTypes\":[\"B-\",\"O+\",\"O+\"],\"capacity\":395,\"cleaningFrequency\":\"annual\",\"lodgingMode\":\"private\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99}],\"ownerPublicKey\":\"0CF8B7087ADFF28409A566F5FC6840B47AB5796FFB4905A068F90108501DF0CF\",\"zipCode\":\"60035\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 20",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"memoryFoam\",\"bloodTypes\":[\"B-\",\"AB-\",\"O-\"],\"capacity\":169,\"cleaningFrequency\":\"monthly\",\"lodgingMode\":\"private\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45},{\"name\":\"sweetTooth\",\"pricePerNight\":464.8}],\"ownerPublicKey\":\"15D26513DD96B28E8A447258157A78C1111342C00FF9903862F78BC7804E0009\",\"zipCode\":\"20164\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 21",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"springs\",\"bloodTypes\":[\"AB+\",\"O+\",\"B-\"],\"capacity\":98,\"cleaningFrequency\":\"annual\",\"lodgingMode\":\"private\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99}],\"ownerPublicKey\":\"E7553F83579A532C52D374772C073585685E9EB5CB194438F0E3E8EDC9762A80\",\"zipCode\":\"60046\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 22",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"latex\",\"bloodTypes\":[\"AB-\",\"O+\",\"B-\",\"B+\"],\"capacity\":373,\"cleaningFrequency\":\"never\",\"lodgingMode\":\"private\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45},{\"name\":\"sweetTooth\",\"pricePerNight\":464.8}],\"ownerPublicKey\":\"A8353DBB521F799A5DAF121EF7CC6B72E5E709677F6F010DDD7D15CE50CCE568\",\"zipCode\":\"21208\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bed 23",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"bedType\":\"memoryFoam\",\"bloodTypes\":[\"AB+\"],\"capacity\":352,\"cleaningFrequency\":\"weekly\",\"lodgingMode\":\"cohabitation\",\"packages\":[{\"name\":\"bloodthirsty\",\"pricePerNight\":849.99},{\"name\":\"allYouCanDrink\",\"pricePerNight\":326.45},{\"name\":\"sweetTooth\",\"pricePerNight\":464.8}],\"ownerPublicKey\":\"18C2E8F239B0E440D8952B16DE26354659211B30233B935808F20281205F84D7\",\"zipCode\":\"44012\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Add Booking",
					"item": [
						{
							"name": "Booking 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0e2dae3-0f62-4c9d-8359-6033e91b164e",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"    var bookingNumber = responseBody.split('/')[4]",
											"    postman.setEnvironmentVariable(\"bookings.1.bookingNumber\", bookingNumber)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tenantPublicKey\":\n    \"72001343BA93508E74E3BFFA68593C2016D0434CF0AA76CB3DF64F93170D60EC\",\n  \"arrivalDate\": \"2020-05-21\",\n  \"numberOfNights\": 3,\n  \"package\": \"allYouCanDrink\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds",
										"{{beds.1.bedNumber}}",
										"bookings"
									]
								},
								"description": "This will take bedNumber of Bed 1 and make a Booking with it"
							},
							"response": []
						},
						{
							"name": "Booking 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0e2dae3-0f62-4c9d-8359-6033e91b164e",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"    var bookingNumber = responseBody.split('/')[4]",
											"    postman.setEnvironmentVariable(\"bookings.2.bookingNumber\", bookingNumber)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tenantPublicKey\":\n    \"72001343BA93508E74E3BFFA68593C2016D0434CF0AA76CB3DF64F93170D60EC\",\n  \"arrivalDate\": \"{{isoTime}}\",\n  \"numberOfNights\": 3,\n  \"package\": \"allYouCanDrink\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds/{{beds.2.bedNumber}}/bookings",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds",
										"{{beds.2.bedNumber}}",
										"bookings"
									]
								},
								"description": "This will take bedNumber of Bed 2 and make a Booking with it"
							},
							"response": []
						},
						{
							"name": "Booking 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0e2dae3-0f62-4c9d-8359-6033e91b164e",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"    var bookingNumber = responseBody.split('/')[4]",
											"    postman.setEnvironmentVariable(\"bookings.3.bookingNumber\", bookingNumber)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tenantPublicKey\":\n    \"72001343BA93508E74E3BFFA68593C2016D0434CF0AA76CB3DF64F93170D60EC\",\n  \"arrivalDate\": \"2020-05-21\",\n  \"numberOfNights\": 3,\n  \"package\": \"allYouCanDrink\",\n  \"colonySize\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds/{{beds.3.bedNumber}}/bookings",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds",
										"{{beds.3.bedNumber}}",
										"bookings"
									]
								},
								"description": "This will take bedNumber of Bed 3 and make a Booking with it"
							},
							"response": []
						},
						{
							"name": "Booking 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0e2dae3-0f62-4c9d-8359-6033e91b164e",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(201);",
											"    var bookingNumber = responseBody.split('/')[4]",
											"    postman.setEnvironmentVariable(\"bookings.4.bookingNumber\", bookingNumber)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"tenantPublicKey\":\n    \"72001343BA93508E74E3BFFA68593C2016D0434CF0AA76CB3DF64F93170D60EC\",\n  \"arrivalDate\": \"2020-05-21\",\n  \"numberOfNights\": 3,\n  \"package\": \"allYouCanDrink\",\n  \"colonySize\": 100\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds/{{beds.4.bedNumber}}/bookings",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds",
										"{{beds.4.bedNumber}}",
										"bookings"
									]
								},
								"description": "This will take bedNumber of Bed 4 and make a Booking with it"
							},
							"response": []
						}
					],
					"description": "Thoses requests will add three bookings based on Bed 1,2 and 3 to tests multiple elements related to Bookings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7492a949-51f0-4b89-b9b9-6444274fe16a",
								"type": "text/javascript",
								"exec": [
									"let dateString = (new Date()).toISOString();",
									"postman.setEnvironmentVariable('isoTime',dateString.substring(0,10));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c6311b4e-82c5-41b6-8871-d151d6059143",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cancel first booking",
					"item": [
						{
							"name": "Valid Booking Cancel",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cff0e3b7-52d3-4526-b00b-7b7051298315",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings/{{bookings.1.bookingNumber}}/cancel",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds",
										"{{beds.1.bedNumber}}",
										"bookings",
										"{{bookings.1.bookingNumber}}",
										"cancel"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Test",
			"item": [
				{
					"name": "Add bed",
					"item": [
						{
							"name": "Public key",
							"item": [
								{
									"name": "Invalid public key (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PUBLIC_KEY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"BiteCoins account public key should contain only alphanumeric characters and have a 256-bits length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": null,\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid public key (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PUBLIC_KEY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"BiteCoins account public key should contain only alphanumeric characters and have a 256-bits length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid public key (not hexadecimal)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PUBLIC_KEY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"BiteCoins account public key should contain only alphanumeric characters and have a 256-bits length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": \"ZF0436A6FB049085B7F19AB73933973BF21276276F2EC7D122AC110BB46A3A4E\",\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid public key (not right length)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PUBLIC_KEY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"BiteCoins account public key should contain only alphanumeric characters and have a 256-bits length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": \"F0436A6FB049085B7F19AB73933973BF21276276F2EC7D122AC110BB46A3A4E\",\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Zip code",
							"item": [
								{
									"name": "Invalid zip code (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_ZIP_CODE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"zip code should be a 5 digits number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": null,\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid zip code (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_ZIP_CODE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"zip code should be a 5 digits number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid zip code (wrong length)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_ZIP_CODE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"zip code should be a 5 digits number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": \"1234\",\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid zip code (include letters)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_ZIP_CODE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"zip code should be a 5 digits number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": \"A1234\",\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid zip code (non existing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"if (pm.environment.get(\"testFeatures.externalApi.zippopotamus\") === true) {",
													"    pm.test(\"response is ok\", function () {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    pm.test(\"contains right error\", function () {",
													"        pm.expect(pm.response.text()).to.include(\"NON_EXISTING_ZIP_CODE\");",
													"    });",
													"    ",
													"    pm.test(\"contains right description\", function () {",
													"        pm.expect(pm.response.text()).to.include(\"zip code is not an existing US postal code\");",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": \"00000\",\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Bed type",
							"item": [
								{
									"name": "Invalid bed type (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_BED_TYPE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"bed type should be one of latex, memoryFoam or springs\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": null,\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid bed type (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_BED_TYPE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"bed type should be one of latex, memoryFoam or springs\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid bed type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_BED_TYPE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"bed type should be one of latex, memoryFoam or springs\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": \"invalid\",\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleaning frequency",
							"item": [
								{
									"name": "Invalid cleaning frequency (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_CLEANING_FREQUENCY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"cleaning frequency should be one of weekly, monthly, annual or never\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": null,\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid cleaning frequency (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_CLEANING_FREQUENCY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"cleaning frequency should be one of weekly, monthly, annual or never\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid cleaning frequency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_CLEANING_FREQUENCY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"cleaning frequency should be one of weekly, monthly, annual or never\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": \"invalid\",\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Blood types",
							"item": [
								{
									"name": "Invalid blood type (null array)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_BLOOD_TYPES\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"blood types should be one or many of O-, O+, AB-, AB+, B-, B+, A- or A+\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": null,\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid blood type (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_BLOOD_TYPES\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"blood types should be one or many of O-, O+, AB-, AB+, B-, B+, A- or A+\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid blood type (stringified)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_BLOOD_TYPES\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"blood types should be one or many of O-, O+, AB-, AB+, B-, B+, A- or A+\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": \"stringified\",\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid blood type (empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_BLOOD_TYPES\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"blood types should be one or many of O-, O+, AB-, AB+, B-, B+, A- or A+\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": [],\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid blood type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_BLOOD_TYPES\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"blood types should be one or many of O-, O+, AB-, AB+, B-, B+, A- or A+\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": [\r\n  \t\"invalid\"\r\n  ],\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid blood type (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_BLOOD_TYPES\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"blood types should be one or many of O-, O+, AB-, AB+, B-, B+, A- or A+\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": [\r\n  \tnull\r\n  ],\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Capacity",
							"item": [
								{
									"name": "Invalid capacity (negative)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_CAPACITY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"capacity should be a positive number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": -1,\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid capacity (absent)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_CAPACITY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"capacity should be a positive number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid capacity (stringified)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_CAPACITY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"capacity should be a positive number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": \"100\",\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid capacity (zero)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_CAPACITY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"capacity should be a positive number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": 0,\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid capacity (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_CAPACITY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"capacity should be a positive number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": null,\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid capacity (exceeding latex)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"EXCEEDING_ACCOMMODATION_CAPACITY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"accommodation capacity exceeding maximum viable capacity for the provided bed type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": \"latex\",\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": 401,\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid capacity (exceeding memory foam)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"EXCEEDING_ACCOMMODATION_CAPACITY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"accommodation capacity exceeding maximum viable capacity for the provided bed type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": \"memoryFoam\",\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": 701,\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid capacity (exceeding springs)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"EXCEEDING_ACCOMMODATION_CAPACITY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"accommodation capacity exceeding maximum viable capacity for the provided bed type\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": \"springs\",\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": 1001,\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Lodging mode",
							"item": [
								{
									"name": "Invalid lodging mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_LODGING_MODE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"lodging mode should be one of private or cohabitation\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": \"invalid\",\r\n  \"packages\": [\r\n    { \r\n      \"name\": {{request.bed.package1.name}},\r\n      \"pricePerNight\": {{request.bed.package1.pricePerNight}}\r\n    },\r\n    { \r\n      \"name\": {{request.bed.package2.name}},\r\n      \"pricePerNight\": {{request.bed.package2.pricePerNight}}\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Packages",
							"item": [
								{
									"name": "Price per night",
									"item": [
										{
											"name": "Invalid price per night (absent)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "332deaad-7b4b-449a-aa77-74c467db9878",
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"contains right error\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGES\");",
															"});",
															"",
															"pm.test(\"contains right description\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"packages should be an array of package name with its corresponding price per night\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": \"bloodthirsty\"\r\n    },\r\n    { \r\n      \"name\": \"allYouCanDrink\",\r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/beds",
													"host": [
														"{{host}}"
													],
													"path": [
														"beds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid price per night (null)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "332deaad-7b4b-449a-aa77-74c467db9878",
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"contains right error\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGES\");",
															"});",
															"",
															"pm.test(\"contains right description\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"packages should be an array of package name with its corresponding price per night\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": \"bloodthirsty\",\r\n      \"pricePerNight\": null\r\n    },\r\n    { \r\n      \"name\": \"allYouCanDrink\",\r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/beds",
													"host": [
														"{{host}}"
													],
													"path": [
														"beds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid price per night (zero)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "332deaad-7b4b-449a-aa77-74c467db9878",
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"contains right error\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGES\");",
															"});",
															"",
															"pm.test(\"contains right description\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"packages should be an array of package name with its corresponding price per night\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": \"bloodthirsty\",\r\n      \"pricePerNight\": 0\r\n    },\r\n    { \r\n      \"name\": \"allYouCanDrink\",\r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/beds",
													"host": [
														"{{host}}"
													],
													"path": [
														"beds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid price per night (negative)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "332deaad-7b4b-449a-aa77-74c467db9878",
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"contains right error\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGES\");",
															"});",
															"",
															"pm.test(\"contains right description\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"packages should be an array of package name with its corresponding price per night\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": \"bloodthirsty\",\r\n      \"pricePerNight\": -100.00\r\n    },\r\n    { \r\n      \"name\": \"allYouCanDrink\",\r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/beds",
													"host": [
														"{{host}}"
													],
													"path": [
														"beds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid price per night (too many decimals)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "332deaad-7b4b-449a-aa77-74c467db9878",
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"contains right error\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGES\");",
															"});",
															"",
															"pm.test(\"contains right description\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"packages should be an array of package name with its corresponding price per night\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": \"bloodthirsty\",\r\n      \"pricePerNight\": 100.000\r\n    },\r\n    { \r\n      \"name\": \"allYouCanDrink\",\r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/beds",
													"host": [
														"{{host}}"
													],
													"path": [
														"beds"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Package name",
									"item": [
										{
											"name": "Invalid package name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "332deaad-7b4b-449a-aa77-74c467db9878",
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"contains right error\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGES\");",
															"});",
															"",
															"pm.test(\"contains right description\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"packages should be an array of package name with its corresponding price per night\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": \"invalid\",\r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/beds",
													"host": [
														"{{host}}"
													],
													"path": [
														"beds"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid package name (absent)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "332deaad-7b4b-449a-aa77-74c467db9878",
														"exec": [
															"pm.test(\"response is ok\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"contains right error\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGES\");",
															"});",
															"",
															"pm.test(\"contains right description\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"packages should be an array of package name with its corresponding price per night\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{host}}/beds",
													"host": [
														"{{host}}"
													],
													"path": [
														"beds"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Invalid package (object)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGES\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"packages should be an array of package name with its corresponding price per night\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": { \r\n      \"name\": \"bloodthirsty\",\r\n      \"pricePerNight\": 100.00\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid package (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGES\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"packages should be an array of package name with its corresponding price per night\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": null\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid package (empty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGES\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"packages should be an array of package name with its corresponding price per night\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid package (absent)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGES\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"packages should be an array of package name with its corresponding price per night\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid package (only all you can drink)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"CANT_OFFER_ALL_YOU_CAN_DRINK_PACKAGE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"in order to offer allYouCanDrink package, you must also offer the bloodthirsty package\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": \"allYouCanDrink\",\r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid package (missing all you can drink dependency with sweet tooth)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"CANT_OFFER_ALL_YOU_CAN_DRINK_PACKAGE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"in order to offer allYouCanDrink package, you must also offer the bloodthirsty package\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": \"allYouCanDrink\",\r\n      \"pricePerNight\": 200.00\r\n    },\r\n    { \r\n      \"name\": \"sweetTooth\",\r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid package (only sweet tooth)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"CANT_OFFER_SWEET_TOOTH_PACKAGE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"in order to offer sweetTooth package, you must also offer the bloodthirsty and allYouCanDrink packages\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": \"sweetTooth\",\r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid package (missing sweet tooth dependency with all you can drink)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"CANT_OFFER_SWEET_TOOTH_PACKAGE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"in order to offer sweetTooth package, you must also offer the bloodthirsty and allYouCanDrink packages\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"ownerPublicKey\": {{request.bed.ownerPublicKey}},\r\n  \"zipCode\": {{request.bed.zipCode}},\r\n  \"bedType\": {{request.bed.bedType}},\r\n  \"cleaningFrequency\": {{request.bed.cleaningFrequency}},\r\n  \"bloodTypes\": {{request.bed.bloodTypes}},\r\n  \"capacity\": {{request.bed.capacity}},\r\n  \"lodgingMode\": {{request.bed.lodgingMode}},\r\n  \"packages\": [\r\n    { \r\n      \"name\": \"sweetTooth\",\r\n      \"pricePerNight\": 200.00\r\n    },\r\n    { \r\n      \"name\": \"allYouCanDrink\",\r\n      \"pricePerNight\": 200.00\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dfc1f95d-611e-4a37-aef6-234e4af78758",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a12fd7d-7f69-4ca0-877f-3fcb79d55a3d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get all beds",
					"item": [
						{
							"name": "Bed type",
							"item": [
								{
									"name": "Get should all have good bed type (latex)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d78278f-e15d-49b7-a115-4a60ccbbb418",
												"exec": [
													"pm.test(\"Should have good bed type\", () => {",
													"  let beds = JSON.parse(responseBody)",
													"  ",
													"",
													"  let flag = beds.every(bed => bed.bedType === \"latex\");",
													"",
													"  pm.expect(flag).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?bedType=latex",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "bedType",
													"value": "latex"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get should all have good bed type (memory foam)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d78278f-e15d-49b7-a115-4a60ccbbb418",
												"exec": [
													"pm.test(\"Should have good bed type\", () => {",
													"  let beds = JSON.parse(responseBody)",
													"  ",
													"",
													"  let flag = beds.every(bed => bed.bedType === \"memoryFoam\");",
													"",
													"  pm.expect(flag).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?bedType=memoryFoam",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "bedType",
													"value": "memoryFoam"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get should all have good bed type (springs)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d78278f-e15d-49b7-a115-4a60ccbbb418",
												"exec": [
													"pm.test(\"Should have good bed type\", () => {",
													"  let beds = JSON.parse(responseBody)",
													"  ",
													"",
													"  let flag = beds.every(bed => bed.bedType === \"springs\");",
													"",
													"  pm.expect(flag).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?bedType=springs",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "bedType",
													"value": "springs"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid bed type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b6e6d4f-fc81-4cd0-87bd-d535b1b62ec4",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_BED_TYPE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"bed type should be one of latex, memoryFoam or springs\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?bedType=invalid",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "bedType",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleaning frequency",
							"item": [
								{
									"name": "Get should all have good cleaning frequency (weekly)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d78278f-e15d-49b7-a115-4a60ccbbb418",
												"exec": [
													"pm.test(\"Should have good cleaning frequency\", () => {",
													"  let beds = JSON.parse(responseBody)",
													"  ",
													"",
													"  let flag = beds.every(bed => bed.cleaningFrequency === \"weekly\");",
													"",
													"  pm.expect(flag).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?cleaningFreq=weekly",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "cleaningFreq",
													"value": "weekly"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get should all have good cleaning frequency (monthly)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d78278f-e15d-49b7-a115-4a60ccbbb418",
												"exec": [
													"pm.test(\"Should have good cleaning frequency\", () => {",
													"  let beds = JSON.parse(responseBody)",
													"  ",
													"",
													"  let flag = beds.every(bed => bed.cleaningFrequency === \"monthly\");",
													"",
													"  pm.expect(flag).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?cleaningFreq=monthly",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "cleaningFreq",
													"value": "monthly"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get should all have good cleaning frequency (annual)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d78278f-e15d-49b7-a115-4a60ccbbb418",
												"exec": [
													"pm.test(\"Should have good cleaning frequency\", () => {",
													"  let beds = JSON.parse(responseBody)",
													"  ",
													"",
													"  let flag = beds.every(bed => bed.cleaningFrequency === \"annual\");",
													"",
													"  pm.expect(flag).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?cleaningFreq=annual",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "cleaningFreq",
													"value": "annual"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid cleaning frequency",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b913ad3-bfe9-4fb3-9d81-cf4ea6a41d03",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_CLEANING_FREQUENCY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"cleaning frequency should be one of weekly, monthly, annual or never\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?cleaningFreq=invalid",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "cleaningFreq",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Blood types",
							"item": [
								{
									"name": "Get should include blood types (O+, O-)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d78278f-e15d-49b7-a115-4a60ccbbb418",
												"exec": [
													"pm.test(\"Should include blood types\", () => {",
													"  let beds = JSON.parse(responseBody)",
													"  ",
													"  let flag = (beds.every(bed => bed.bloodTypes.include(\"O+\")) && beds.every(bed => bed.bloodTypes.include(\"O-\")));",
													"  ",
													"  pm.expect(flag).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?bloodTypes=O+,O-",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "bloodTypes",
													"value": "O+,O-"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get should include blood type (O+)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d78278f-e15d-49b7-a115-4a60ccbbb418",
												"exec": [
													"pm.test(\"Should include blood type\", () => {",
													"  let beds = JSON.parse(responseBody)",
													"  ",
													"  let flag = beds.every(bed => bed.bloodTypes.include(\"O+\"));",
													"  ",
													"  pm.expect(flag).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?bloodTypes=O+",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "bloodTypes",
													"value": "O+"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid blood types",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33e1c05e-84df-4685-abf1-a1ac4e4f58a5",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_BLOOD_TYPES\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"blood types should be one or many of O-, O+, AB-, AB+, B-, B+, A- or A+\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?bloodTypes=invalid",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "bloodTypes",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Min capacity",
							"item": [
								{
									"name": "Get should all have greater capacity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d78278f-e15d-49b7-a115-4a60ccbbb418",
												"exec": [
													"pm.test(\"Should have greater capacity\", () => {",
													"  let beds = JSON.parse(responseBody)",
													"  ",
													"",
													"  let flag = beds.every(bed => bed.capacity >= 300);",
													"",
													"  pm.expect(flag).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?minCapacity=300",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "minCapacity",
													"value": "300"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid min capacity (zero)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33e1c05e-84df-4685-abf1-a1ac4e4f58a5",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_MINIMAL_CAPACITY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"minimal capacity should be a positive number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?minCapacity=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "minCapacity",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid min capacity (not a number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33e1c05e-84df-4685-abf1-a1ac4e4f58a5",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_MINIMAL_CAPACITY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"minimal capacity should be a positive number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?minCapacity=minCapacity",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "minCapacity",
													"value": "minCapacity"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid min capacity (negative)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33e1c05e-84df-4685-abf1-a1ac4e4f58a5",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_MINIMAL_CAPACITY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"minimal capacity should be a positive number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?minCapacity=-10",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "minCapacity",
													"value": "-10"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Arrival date",
							"item": [
								{
									"name": "Invalid arrival date (format)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_ARRIVAL_DATE\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"arrival date should be formatted as YYYY-MM-DD\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?minCapacity=20&arrivalDate=2020/10/10",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "minCapacity",
													"value": "20"
												},
												{
													"key": "arrivalDate",
													"value": "2020/10/10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid arrival date (not a date)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_ARRIVAL_DATE\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"arrival date should be formatted as YYYY-MM-DD\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?minCapacity=20&arrivalDate=now",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "minCapacity",
													"value": "20"
												},
												{
													"key": "arrivalDate",
													"value": "now"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid arrival date (in the past)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"ARRIVAL_DATE_IN_THE_PAST\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"cannot book a stay in the past\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?minCapacity=20&arrivalDate=2019-12-31",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "minCapacity",
													"value": "20"
												},
												{
													"key": "arrivalDate",
													"value": "2019-12-31"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Arrival date without min capacity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error === \"ARRIVAL_DATE_WITHOUT_MINIMAL_CAPACITY\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"a minimal capacity should be provided along with the arrival date\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?arrivalDate=2020-10-10",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "arrivalDate",
													"value": "2020-10-10"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Number of nights",
							"item": [
								{
									"name": "Invalid number of nights (negative)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_NUMBER_OF_NIGHTS\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"number of nights should be a number between 1 and 90\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?minCapacity=20&numberOfNights=-10",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "minCapacity",
													"value": "20"
												},
												{
													"key": "numberOfNights",
													"value": "-10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid number of nights (zero)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_NUMBER_OF_NIGHTS\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"number of nights should be a number between 1 and 90\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?minCapacity=20&numberOfNights=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "minCapacity",
													"value": "20"
												},
												{
													"key": "numberOfNights",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid number of nights (not a number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_NUMBER_OF_NIGHTS\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"number of nights should be a number between 1 and 90\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?minCapacity=20&numberOfNights=numberOfNights",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "minCapacity",
													"value": "20"
												},
												{
													"key": "numberOfNights",
													"value": "numberOfNights"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid number of nights (more than 90)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_NUMBER_OF_NIGHTS\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"number of nights should be a number between 1 and 90\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?minCapacity=20&numberOfNights=91",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "minCapacity",
													"value": "20"
												},
												{
													"key": "numberOfNights",
													"value": "91"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Number of nights without min capacity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error === \"NUMBER_OF_NIGHTS_WITHOUT_MINIMAL_CAPACITY\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"a minimal capacity should be provided along with the number of nights\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?numberOfNights=10",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "numberOfNights",
													"value": "10"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Package",
							"item": [
								{
									"name": "Get should include package (sweet tooth)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d78278f-e15d-49b7-a115-4a60ccbbb418",
												"exec": [
													"pm.test(\"Should have include package\", () => {",
													"  let beds = JSON.parse(responseBody)",
													"  console.log(beds)",
													"  let flag = beds.every(bed => bed.packages.include(\"sweetTooth\"));",
													"  beds.every(bed => console.log(bed))",
													"  pm.expect(flag).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?package=sweetTooth",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "package",
													"value": "sweetTooth"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get should include package (all you can drink)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d78278f-e15d-49b7-a115-4a60ccbbb418",
												"exec": [
													"pm.test(\"Should have include package\", () => {",
													"  let beds = JSON.parse(responseBody)",
													"  console.log(beds)",
													"  let flag = beds.every(bed => bed.packages.include(\"allYouCanDrink\"));",
													"  beds.every(bed => console.log(bed))",
													"  pm.expect(flag).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?package=allYouCanDrink",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "package",
													"value": "allYouCanDrink"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get should include package (bloodthirsty)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d78278f-e15d-49b7-a115-4a60ccbbb418",
												"exec": [
													"pm.test(\"Should have include package\", () => {",
													"  let beds = JSON.parse(responseBody)",
													"  console.log(beds)",
													"  let flag = beds.every(bed => bed.packages.include(\"bloodthirsty\"));",
													"  beds.every(bed => console.log(bed))",
													"  pm.expect(flag).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?package=bloodthirsty",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "package",
													"value": "bloodthirsty"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33e1c05e-84df-4685-abf1-a1ac4e4f58a5",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"package should be one of bloodthirsty, allYouCanDrink, sweetTooth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?package=invalid",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "package",
													"value": "invalid"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Origin",
							"item": [
								{
									"name": "Invalid origin (non-numeric)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_ZIP_CODE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"zip code should be a 5 digits number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?origin=1254A",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "origin",
													"value": "1254A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid origin (wrong length)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_ZIP_CODE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"zip code should be a 5 digits number\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?origin=1254",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "origin",
													"value": "1254"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid origin (non existing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"NON_EXISTING_ZIP_CODE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"zip code is not an existing US postal code\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?origin=00000",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "bedType",
													"value": "latex",
													"disabled": true
												},
												{
													"key": "package",
													"value": "bloodthirsty",
													"disabled": true
												},
												{
													"key": "cleaningFreq",
													"value": "annual",
													"disabled": true
												},
												{
													"key": "bloodTypes",
													"value": "O-,O+",
													"disabled": true
												},
												{
													"key": "minCapacity",
													"value": "20",
													"disabled": true
												},
												{
													"key": "origin",
													"value": "00000"
												},
												{
													"key": "maxDistance",
													"value": "null",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Max distance",
							"item": [
								{
									"name": "Invalid max distance (negative)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_MAX_DISTANCE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"distance should be a number greater than 0\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?origin=90210&maxDistance=-100",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "origin",
													"value": "90210"
												},
												{
													"key": "maxDistance",
													"value": "-100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid max distance (zero)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_MAX_DISTANCE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"distance should be a number greater than 0\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?origin=90210&maxDistance=0",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "origin",
													"value": "90210"
												},
												{
													"key": "maxDistance",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid max distance (not a number)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_MAX_DISTANCE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"distance should be a number greater than 0\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?origin=90210&maxDistance=maxDistance",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "origin",
													"value": "90210"
												},
												{
													"key": "maxDistance",
													"value": "maxDistance"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Max distance without origin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"MAX_DISTANCE_WITHOUT_ORIGIN\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"an origin point should be provided along with the maximum distance\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds?maxDistance=100",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds"
											],
											"query": [
												{
													"key": "maxDistance",
													"value": "100"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Add booking to bed",
					"item": [
						{
							"name": "Public key",
							"item": [
								{
									"name": "Invalid public key (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PUBLIC_KEY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"BiteCoins account public key should contain only alphanumeric characters and have a 256-bits length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": null,\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"numberOfNights\": {{request.booking.numberOfNights}},\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid public key (missing)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PUBLIC_KEY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"BiteCoins account public key should contain only alphanumeric characters and have a 256-bits length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"numberOfNights\": {{request.booking.numberOfNights}},\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid public key (not hexadecimal)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PUBLIC_KEY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"BiteCoins account public key should contain only alphanumeric characters and have a 256-bits length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"tenantPublicKey\": \"ZF0436A6FB049085B7F19AB73933973BF21276276F2EC7D122AC110BB46A3A4E\",\r\n  \"arrivalDate\": {{request.booking.arrivalDate}},\r\n  \"numberOfNights\": {{request.booking.numberOfNights}},\r\n  \"package\": {{request.booking.package}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid public key (not right length)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PUBLIC_KEY\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"BiteCoins account public key should contain only alphanumeric characters and have a 256-bits length\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"tenantPublicKey\": \"0101101\",\r\n  \"arrivalDate\": {{request.booking.arrivalDate}},\r\n  \"numberOfNights\": {{request.booking.numberOfNights}},\r\n  \"package\": {{request.booking.package}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Arrival date",
							"item": [
								{
									"name": "Invalid arrival date (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_ARRIVAL_DATE\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"arrival date should be formatted as YYYY-MM-DD\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": null,\n  \"numberOfNights\": {{request.booking.numberOfNights}},\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid arrival date (absent)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_ARRIVAL_DATE\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"arrival date should be formatted as YYYY-MM-DD\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"numberOfNights\": {{request.booking.numberOfNights}},\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid arrival date (format)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_ARRIVAL_DATE\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"arrival date should be formatted as YYYY-MM-DD\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": \"2020/10/10\",\n  \"numberOfNights\": {{request.booking.numberOfNights}},\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid arrival date (not a date)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_ARRIVAL_DATE\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"arrival date should be formatted as YYYY-MM-DD\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": \"arrivalDate\",\n  \"numberOfNights\": {{request.booking.numberOfNights}},\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid arrival date (in the past)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"ARRIVAL_DATE_IN_THE_PAST\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"cannot book a stay in the past\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": \"2019-10-10\",\n  \"numberOfNights\": {{request.booking.numberOfNights}},\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Number of nights",
							"item": [
								{
									"name": "Invalid number of nights (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_NUMBER_OF_NIGHTS\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"number of nights should be a number between 1 and 90\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"numberOfNights\": null,\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid number of nights (absent)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_NUMBER_OF_NIGHTS\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"number of nights should be a number between 1 and 90\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid number of nights (zero)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_NUMBER_OF_NIGHTS\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"number of nights should be a number between 1 and 90\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"numberOfNights\": 0,\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid number of nights (negative)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_NUMBER_OF_NIGHTS\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"number of nights should be a number between 1 and 90\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"numberOfNights\": -1,\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid number of nights (over 90)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_NUMBER_OF_NIGHTS\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"number of nights should be a number between 1 and 90\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"numberOfNights\": 91,\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid number of nights (stringified)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_NUMBER_OF_NIGHTS\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"number of nights should be a number between 1 and 90\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"numberOfNights\": \"90\",\n  \"package\": {{request.booking.package}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Package",
							"item": [
								{
									"name": "Invalid package (null)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"package should be one of bloodthirsty, allYouCanDrink, sweetTooth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"numberOfNights\": {{request.booking.numberOfNights}},\n  \"package\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid package (absent)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"package should be one of bloodthirsty, allYouCanDrink, sweetTooth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"numberOfNights\": {{request.booking.numberOfNights}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "332deaad-7b4b-449a-aa77-74c467db9878",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"INVALID_PACKAGE\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"package should be one of bloodthirsty, allYouCanDrink, sweetTooth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"numberOfNights\": {{request.booking.numberOfNights}},\n  \"package\": \"invalid\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Colony size",
							"item": [
								{
									"name": "Invalid colony size (zero)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"    ",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_COLONY_SIZE\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"colony size should be a positive number\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"numberOfNights\": {{request.booking.numberOfNights}},\n  \"package\": {{request.booking.package}},\n  \"colonySize\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid colony size (negative)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52f232af-963a-44e2-b39b-52b2487004a6",
												"exec": [
													"let response = JSON.parse(responseBody);",
													"    ",
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(response.error ===\"INVALID_COLONY_SIZE\").to.be.true;",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"     pm.expect(response.description === \"colony size should be a positive number\").to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tenantPublicKey\": {{request.booking.tenantPublicKey}},\n  \"arrivalDate\": {{request.booking.arrivalDate}},\n  \"numberOfNights\": {{request.booking.numberOfNights}},\n  \"package\": {{request.booking.package}},\n  \"colonySize\": -1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "40d00745-721c-4d0b-bfbd-9e2ad3995117",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e2ef5b34-fd05-4977-b7a0-50770d57c5f6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cancel booking",
					"item": [
						{
							"name": "Invalid Booking Cancel",
							"item": [
								{
									"name": "Invalid Cancel (under 24h before)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c836746-c804-45ed-a938-c0a6fa43c71c",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"CANCELATION_NOT_ALLOWED\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"cancelation period for this booking is over\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/beds/{{beds.2.bedNumber}}/bookings/{{bookings.2.bookingNumber}}/cancel",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.2.bedNumber}}",
												"bookings",
												"{{bookings.2.bookingNumber}}",
												"cancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invalid Cancel (already cancelled)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cff0e3b7-52d3-4526-b00b-7b7051298315",
												"exec": [
													"pm.test(\"response is ok\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"contains right error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"BOOKING_ALREADY_CANCELED\");",
													"});",
													"",
													"pm.test(\"contains right description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"booking has already been canceled\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/beds/{{beds.1.bedNumber}}/bookings/{{bookings.1.bookingNumber}}/cancel",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.1.bedNumber}}",
												"bookings",
												"{{bookings.1.bookingNumber}}",
												"cancel"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cancel Validation",
							"item": [
								{
									"name": "Cancel should return parameter refund amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cff0e3b7-52d3-4526-b00b-7b7051298315",
												"exec": [
													"pm.test(\"Should have refund amount\", () => {",
													"  pm.expect(pm.response.text()).to.include(\"refundAmount\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{host}}/beds/{{beds.3.bedNumber}}/bookings/{{bookings.3.bookingNumber}}/cancel",
											"host": [
												"{{host}}"
											],
											"path": [
												"beds",
												"{{beds.3.bedNumber}}",
												"bookings",
												"{{bookings.3.bookingNumber}}",
												"cancel"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "032bc2b8-7942-44c1-a628-d7ad44662143",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "66bc05f2-9dc9-4895-896b-b77e768ea27b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clear transactions",
					"item": [
						{
							"name": "Clear all",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/admin",
									"host": [
										"{{host}}"
									],
									"path": [
										"admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate no beds present",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"let beds = JSON.parse(responseBody)",
											"",
											"let flag = (beds.length === 0);",
											"",
											"pm.expect(flag).to.be.true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate no transactions present",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"let beds = JSON.parse(responseBody)",
											"",
											"let flag = (beds.length === 0);",
											"",
											"pm.expect(flag).to.be.true;"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/admin/transactions",
									"host": [
										"{{host}}"
									],
									"path": [
										"admin",
										"transactions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Add transactions fees",
					"item": [
						{
							"name": "Add transactions fees (No fees)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/admin/transactions",
									"host": [
										"{{host}}"
									],
									"path": [
										"admin",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add transactions fees (Fees null)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"contains right error\", function () {",
											"    pm.expect(response.error ===\"INVALID_SERVICE_FEE\").to.be.true;",
											"});",
											"",
											"pm.test(\"contains right description\", function () {",
											"     pm.expect(response.description === \"service fee should be a number greater than or equal to 0\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"serviceFee\": \"8.125\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/admin/transactions",
									"host": [
										"{{host}}"
									],
									"path": [
										"admin",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add transactions fees (Fees as string)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"contains right error\", function () {",
											"    pm.expect(response.error ===\"INVALID_SERVICE_FEE\").to.be.true;",
											"});",
											"",
											"pm.test(\"contains right description\", function () {",
											"     pm.expect(response.description === \"service fee should be a number greater than or equal to 0\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"serviceFee\": \"8.125\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/admin/transactions",
									"host": [
										"{{host}}"
									],
									"path": [
										"admin",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add transactions fees (Fees too low)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"contains right error\", function () {",
											"    pm.expect(response.error ===\"OUT_OF_BOUNDS_SERVICE_FEE\").to.be.true;",
											"});",
											"",
											"pm.test(\"contains right description\", function () {",
											"     pm.expect(response.description === \"service fee should be a number greater than or equal to 0\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"serviceFee\": -1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/admin/transactions",
									"host": [
										"{{host}}"
									],
									"path": [
										"admin",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add transactions fees (Fees too high)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"contains right error\", function () {",
											"    pm.expect(response.error ===\"OUT_OF_BOUNDS_SERVICE_FEE\").to.be.true;",
											"});",
											"",
											"pm.test(\"contains right description\", function () {",
											"     pm.expect(response.description === \"service fee should be a number between 0 and 15 inclusively\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"serviceFee\": 15.1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/admin/transactions",
									"host": [
										"{{host}}"
									],
									"path": [
										"admin",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add transactions fees",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"serviceFee\": 8.125\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/admin/transactions",
									"host": [
										"{{host}}"
									],
									"path": [
										"admin",
										"transactions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get report",
					"item": [
						{
							"name": "Get report (null scope)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"contains right error\", function () {",
											"    pm.expect(response.error ===\"INVALID_REPORT_SCOPE\").to.be.true;",
											"});",
											"",
											"pm.test(\"contains right description\", function () {",
											"     pm.expect(response.description === \"report scope should be one of weekly, monthly, quaterly or annual\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds?scope=null",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									],
									"query": [
										{
											"key": "scope",
											"value": "null"
										},
										{
											"key": "metrics",
											"value": null,
											"disabled": true
										},
										{
											"key": "dimensions",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get report (invalid scope)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"contains right error\", function () {",
											"    pm.expect(response.error ===\"INVALID_REPORT_SCOPE\").to.be.true;",
											"});",
											"",
											"pm.test(\"contains right description\", function () {",
											"     pm.expect(response.description === \"report scope should be one of weekly, monthly, quaterly or annual\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds?scope=badValue",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									],
									"query": [
										{
											"key": "scope",
											"value": "badValue"
										},
										{
											"key": "metrics",
											"value": null,
											"disabled": true
										},
										{
											"key": "dimensions",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get report (null metric)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"contains right error\", function () {",
											"    pm.expect(response.error ===\"INVALID_REPORT_METRICS\").to.be.true;",
											"});",
											"",
											"pm.test(\"contains right description\", function () {",
											"     pm.expect(response.description === \"report metrics should be one or many of incomes, reservations or cancelations\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds?metrics=null",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									],
									"query": [
										{
											"key": "scope",
											"value": "badValue",
											"disabled": true
										},
										{
											"key": "metrics",
											"value": "null"
										},
										{
											"key": "dimensions",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get report (invalid metric)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"contains right error\", function () {",
											"    pm.expect(response.error ===\"INVALID_REPORT_METRICS\").to.be.true;",
											"});",
											"",
											"pm.test(\"contains right description\", function () {",
											"     pm.expect(response.description === \"report metrics should be one or many of incomes, reservations or cancelations\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds?metrics=badValue",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									],
									"query": [
										{
											"key": "scope",
											"value": "badValue",
											"disabled": true
										},
										{
											"key": "metrics",
											"value": "badValue"
										},
										{
											"key": "dimensions",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get report (null dimensions)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"contains right error\", function () {",
											"    pm.expect(response.error ===\"INVALID_REPORT_DIMENSIONS\").to.be.true;",
											"});",
											"",
											"pm.test(\"contains right description\", function () {",
											"     pm.expect(response.description === \"report dimensions should be one or many of package or lodgingMode\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds?dimensions=null",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									],
									"query": [
										{
											"key": "scope",
											"value": "badValue",
											"disabled": true
										},
										{
											"key": "metrics",
											"value": "badValue",
											"disabled": true
										},
										{
											"key": "dimensions",
											"value": "null"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get report (invalid dimensions)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"contains right error\", function () {",
											"    pm.expect(response.error ===\"INVALID_REPORT_DIMENSIONS\").to.be.true;",
											"});",
											"",
											"pm.test(\"contains right description\", function () {",
											"     pm.expect(response.description === \"report dimensions should be one or many of package or lodgingMode\").to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds?dimensions=badValue",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									],
									"query": [
										{
											"key": "scope",
											"value": "badValue",
											"disabled": true
										},
										{
											"key": "metrics",
											"value": "badValue",
											"disabled": true
										},
										{
											"key": "dimensions",
											"value": "badValue"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get report",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "332deaad-7b4b-449a-aa77-74c467db9878",
										"exec": [
											"let response = JSON.parse(responseBody);",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var Ajv = require('ajv'),",
											"    ajv = new Ajv({logger: console}),",
											"    schema = {",
											"    \"items\": {",
											"        \"required\": [",
											"            \"period\",",
											"            \"data\"",
											"        ],",
											"        \"properties\": {",
											"            \"period\": {",
											"                \"$id\": \"#/items/properties/period\",",
											"                \"type\": \"string\"",
											"            },",
											"            \"data\": {",
											"                \"items\": {",
											"                    \"required\": [",
											"                        \"dimensions\",",
											"                        \"metrics\"",
											"                    ],",
											"                    \"properties\": {",
											"                        \"dimensions\": {",
											"                            \"items\": {",
											"                                \"required\": [",
											"                                    \"name\",",
											"                                    \"value\"",
											"                                ],",
											"                                \"properties\": {",
											"                                    \"name\": {",
											"                                        \"$id\": \"#/items/properties/data/items/properties/dimensions/items/properties/name\",",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"value\": {",
											"                                        \"$id\": \"#/items/properties/data/items/properties/dimensions/items/properties/value\",",
											"                                        \"type\": \"string\"",
											"                                    }",
											"                                },",
											"                                \"$id\": \"#/items/properties/data/items/properties/dimensions/items\",",
											"                                \"type\": \"object\"",
											"                            },",
											"                            \"$id\": \"#/items/properties/data/items/properties/dimensions\",",
											"                            \"type\": \"array\"",
											"                        },",
											"                        \"metrics\": {",
											"                            \"items\": {",
											"                                \"required\": [",
											"                                    \"name\",",
											"                                    \"value\"",
											"                                ],",
											"                                \"properties\": {",
											"                                    \"name\": {",
											"                                        \"$id\": \"#/items/properties/data/items/properties/metrics/items/properties/name\",",
											"                                        \"type\": \"string\"",
											"                                    },",
											"                                    \"value\": {",
											"                                        \"$id\": \"#/items/properties/data/items/properties/metrics/items/properties/value\",",
											"                                        \"type\": \"number\"",
											"                                    }",
											"                                },",
											"                                \"$id\": \"#/items/properties/data/items/properties/metrics/items\",",
											"                                \"type\": \"object\"",
											"                            },",
											"                            \"$id\": \"#/items/properties/data/items/properties/metrics\",",
											"                            \"type\": \"array\"",
											"                        }",
											"                    },",
											"                    \"$id\": \"#/items/properties/data/items\",",
											"                    \"type\": \"object\"",
											"                },",
											"                \"$id\": \"#/items/properties/data\",",
											"                \"type\": \"array\"",
											"            }",
											"        },",
											"        \"$id\": \"#/items\",",
											"        \"type\": \"object\"",
											"    },",
											"    \"$id\": \"http://example.org/root.json#\",",
											"    \"type\": \"array\",",
											"    \"definitions\": {},",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
											"};",
											"",
											"pm.test('Schema is valid', function() {",
											"var data = pm.response.json();",
											"pm.expect(ajv.validate(schema, data)).to.be.true;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/beds",
									"host": [
										"{{host}}"
									],
									"path": [
										"beds"
									],
									"query": [
										{
											"key": "scope",
											"value": "badValue",
											"disabled": true
										},
										{
											"key": "metrics",
											"value": null,
											"disabled": true
										},
										{
											"key": "dimensions",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "94320a73-9392-4a39-8d46-32bc549f8aa3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "52d0599c-7191-40a7-ae6c-b31fcab79827",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}